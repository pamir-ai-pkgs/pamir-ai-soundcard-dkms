name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
        type: string

env:
  DEBIAN_FRONTEND: noninteractive

permissions:
  contents: write
  packages: read

jobs:
  build-release:
    runs-on: ubuntu-22.04-arm
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            # For non-tag pushes, use default version
            VERSION="v1.0.0"
          fi
          
          # Remove 'v' prefix if present and parse version format vX.Y.Z-A
          CLEAN_VERSION=${VERSION#v}
          
          # Split version into semantic version and debian revision
          if [[ "$CLEAN_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)$ ]]; then
            SEMANTIC_VERSION="${BASH_REMATCH[1]}"
            DEBIAN_REVISION="${BASH_REMATCH[2]}"
          else
            # Fallback for other formats
            SEMANTIC_VERSION="$CLEAN_VERSION"
            DEBIAN_REVISION="1"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "clean_version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          echo "semantic_version=${SEMANTIC_VERSION}" >> $GITHUB_OUTPUT
          echo "debian_revision=${DEBIAN_REVISION}" >> $GITHUB_OUTPUT
          echo "package_name=pamir-ai-soundcard-dkms_${SEMANTIC_VERSION}-${DEBIAN_REVISION}_all.deb" >> $GITHUB_OUTPUT
          
          echo "Building version: ${VERSION}"
          echo "Clean version: ${CLEAN_VERSION}"

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('debian/control') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Update package lists
        run: |
          sudo apt-get update

      - name: Install build dependencies
        run: |
          sudo apt-get install -y \
            build-essential \
            debhelper \
            dkms \
            device-tree-compiler \
            fakeroot \
            dpkg-dev

      - name: Verify native build environment
        run: |
          gcc --version
          uname -m
          echo "Native ARM64 build environment ready"

      - name: Update package version in debian/changelog
        run: |
          # Update the changelog with proper timestamp
          CURRENT_DATE=$(date -R)
          sed -i "s|\$(date -R)|${CURRENT_DATE}|" debian/changelog
          
          # Update version if different from default
          if [[ "${{ steps.version.outputs.semantic_version }}" != "1.0.0" ]] || [[ "${{ steps.version.outputs.debian_revision }}" != "1" ]]; then
            sed -i "s/1.0.0-1/${{ steps.version.outputs.semantic_version }}-${{ steps.version.outputs.debian_revision }}/" debian/changelog
          fi
          
          echo "Updated changelog:"
          head -5 debian/changelog

      - name: Build Debian package
        run: |
          echo "Starting build process..."
          chmod +x build-deb.sh
          
          # Find the actual kernel headers directory
          HEADERS_DIR=$(find /lib/modules -name "build" -type l 2>/dev/null | head -1)
          if [ -z "$HEADERS_DIR" ]; then
            HEADERS_DIR=$(find /usr/src -name "linux-headers-*" -type d | head -1)
          fi
          
          echo "Available kernel directories:"
          ls -la /lib/modules/ || true
          ls -la /usr/src/ | grep linux-headers || true
          echo "Found kernel headers at: $HEADERS_DIR"
          
          # Create symlink if headers directory exists but build symlink is missing
          if [ -n "$HEADERS_DIR" ] && [ ! -L "/lib/modules/$(uname -r)/build" ]; then
            sudo mkdir -p "/lib/modules/$(uname -r)"
            sudo ln -sf "$HEADERS_DIR" "/lib/modules/$(uname -r)/build"
            echo "Created symlink: /lib/modules/$(uname -r)/build -> $HEADERS_DIR"
          fi
          
          # Modify build-deb.sh to use native gcc instead of cross-compiler
          sed -i 's/CC="aarch64-linux-gnu-gcc" //' build-deb.sh
          ./build-deb.sh
          
          echo "Build completed. Checking artifacts:"
          ls -la dist/

      - name: Verify package integrity
        run: |
          if [[ -f "dist/${{ steps.version.outputs.package_name }}" ]]; then
            echo "Package found: dist/${{ steps.version.outputs.package_name }}"
            
            # Check package metadata
            dpkg -I "dist/${{ steps.version.outputs.package_name }}"
            
            # Check package contents
            echo "Package contents:"
            dpkg -c "dist/${{ steps.version.outputs.package_name }}"
            
            # Verify package architecture
            ARCH=$(dpkg -f "dist/${{ steps.version.outputs.package_name }}" Architecture)
            echo "Package architecture: $ARCH"
            
          else
            echo "Error: Expected package not found"
            echo "Available files in dist/:"
            ls -la dist/
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pamir-ai-soundcard-dkms-${{ steps.version.outputs.clean_version }}-arm64
          path: |
            dist/*.deb
            dist/*.changes
            dist/*.buildinfo
          retention-days: 90
          if-no-files-found: error

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            # Pamir AI Soundcard DKMS Release ${{ steps.version.outputs.version }}
            
            ## Package Information
            - **Version**: ${{ steps.version.outputs.clean_version }}
            - **Architecture**: ARM64 (aarch64)
            - **Target Platform**: Raspberry Pi CM5, Distiller devices
            
            ## Installation
            ```bash
            # Download the .deb package
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/${{ steps.version.outputs.package_name }}
            
            # Install the package
            sudo dpkg -i ${{ steps.version.outputs.package_name }}
            
            # Install dependencies if needed
            sudo apt-get install -f
            
            # Verify installation
            dkms status
            ```
            
            ## Features
            - Pamir AI soundcard DKMS kernel modules
            - TLV320AIC3204 codec support
            - Hardware volume control via sysfs
            - Device tree overlay for Raspberry Pi CM5
            - ALSA sound card interface
            
            ## Modules Included
            - `pamir-ai-soundcard`: Main soundcard driver
            - `pamir-ai-i2c-sound`: I2C sound interface driver  
            - `pamir-ai-rpi-soundcard`: Raspberry Pi specific driver
            
            Built automatically with GitHub Actions.
          files: |
            dist/${{ steps.version.outputs.package_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Package**: ${{ steps.version.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: âœ… Success" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "dist/${{ steps.version.outputs.package_name }}" ]]; then
            PACKAGE_SIZE=$(du -h "dist/${{ steps.version.outputs.package_name }}" | cut -f1)
            echo "- **Package Size**: $PACKAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation Command" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "sudo dpkg -i ${{ steps.version.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
